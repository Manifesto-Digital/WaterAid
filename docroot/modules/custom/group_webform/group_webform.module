<?php

/**
 * @file
 * Gives the ability to create and manage webforms for groups.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group_webform\Plugin\Menu\LocalTask\LocalTaskGroupMenu;
use Drupal\webform\Entity\Webform;
use Drupal\webform\WebformInterface;

/**
 * Implements hook_help().
 */
function group_webform_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.group_webform':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows you to create group relationships between webform entities and groups.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function group_webform_group_relationship_delete(EntityInterface $entity) {
  if ($entity->getPlugin()->getPluginId() === 'group_webform:webform') {
    \Drupal::service('cache.groupwebform')->invalidateAll();
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function group_webform_entity_type_alter(array &$entity_types) {
  $entity_types['webform']->setHandlerClass('list_builder', "Drupal\group_webform\GroupWebformEntityListBuilder");
  $entity_types['webform_submission']->setHandlerClass('list_builder', "Drupal\group_webform\GroupWebformSubmissionListBuilder");
}

/**
 * Prepares variables for the group relationship template to render the webform.
 *
 * Default template: group-relationship.html.twig.
 *
 * @param array $variables
 *   - elements: An array of elements to display in view mode.
 *   - group_relationship: The group relationship object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function group_webform_preprocess_group_relationship(array &$variables) {
  /** @var \Drupal\webform\Entity\Webform $webform */
  $webform = $variables["group_relationship"]->getEntity();
  if ($webform instanceof Webform) {
    $output = \Drupal::EntityTypeManager()
      ->getViewBuilder('webform')
      ->view($webform);
    $variables["relationship"]["webform"] = $output;
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function group_webform_field_widget_single_element_group_webform_entity_reference_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  // Hide webform settings for the field widget.
  $items = $context['items'];
  $field_definition = $items->getFieldDefinition();
  if ($field_definition->getType() !== 'webform') {
    return;
  }
  if ($items->getEntity()->getEntityTypeId() !== 'node'
      && $items->getEntity()->getEntityTypeId() !== 'paragraph') {
    return;
  }
  // Hide Webform field settings.
  $element['settings']['#access'] = FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_access() for webform entities.
 */
function group_webform_webform_access(EntityInterface $webform, $operation, AccountInterface $account) {
  if (!($webform instanceof WebformInterface)) {
    return AccessResult::neutral();
  }
  else {
    $route_name = \Drupal::routeMatch()->getRouteName();
    // Check access to webforms embedded in nodes
    // via Webform Entity Reference fields
    // specifically those used by Paragraphs.
    if ($route_name === "entity.node.canonical") {
      if ($operation === 'submission_create' || 'submission_view_own') {
        return \Drupal::service('groupwebform.webform')->webformAccess('view', $webform, $account);
      }
      if ($operation === 'update') {
        return \Drupal::service('groupwebform.webform')->webformAccess('update', $webform, $account);
      }
      if ($operation === 'submission_update_any') {
        return \Drupal::service('groupwebform.webform')->webformAccess('submission_view_any', $webform, $account);
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function group_webform_local_tasks_alter(&$local_tasks): void {
  if (isset($local_tasks['entity.group_content_menu.edit_form'])) {
    $local_tasks['entity.group_content_menu.edit_form']['class'] = LocalTaskGroupMenu::class;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function group_webform_preprocess_menu__group_menu(&$variables): void {

  // We only want to act on the WA Site menu, in case any new ones get added in
  // future.
  if (isset($variables['group_content_menu']['group_content_menu_type']) && $variables['group_content_menu']['group_content_menu_type'] == 'wateraid_site_menu') {
    foreach ($variables['items'] as &$item) {

      // The entity with our custom fields on are nested inside the menu link
      // entity that Group Content Menu uses, so we need to dig down to find it.
      if ($entity = $item['original_link'] ?? NULL) {
        if ($menu_content = $entity->getEntity()) {

          /** @var \Drupal\Core\Template\Attribute $attributes */
          $attributes = &$item['attributes'];

          // Any custom classes and attributes should be added to the li
          // surrounding the menu link.
          if ($classes = $menu_content->get('field_classes')->getValue()) {
            foreach ($classes as $class) {
              $attributes->addClass($class);
            }
          }

          if ($params = $menu_content->get('field_attributes')->getValue()) {
            foreach ($params as $param) {
              $attributes->setAttribute($param['key'], $param['value']);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_token_info_alter().
 */
function group_webform_token_info_alter(&$data): void {
  if (isset($data['tokens']['group_relationship'])) {
    $data['tokens']['group_relationship']['content_name'] = [
      'name' => t('Content Name'),
      'description' => t('The name of the content linked to the relationship.')
    ];
  }
}

/**
 * Implements hook_tokens().
 */
function group_webform_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'group_relationship') {
    if (isset($tokens['content_name'])) {

      $replacements[$tokens['content_name']] = '';

      /** @var \Drupal\group\Entity\GroupRelationshipInterface $relationship */
      $relationship = $data['group_relationship'];

      if ($content = $relationship->getEntity()) {
        if (method_exists($content, 'label')) {
          $replacements[$tokens['content_name']] = $content->label();
        }
        else {
          $one = 1;
        }
      }
    }
  }

  return $replacements;
}
