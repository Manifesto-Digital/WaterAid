<?php

/**
 * @file
 * Module file for wateraid_azure_storage module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\wateraid_azure_storage\AzureStorageQueueMessage;
use Drupal\wateraid_donation_forms\DonationConstants;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Plugin\WebformHandlerInterface;
use Drupal\webform\WebformInterface;

/**
 * Implements hook_entity_base_field_info_alter().
 */
function wateraid_azure_storage_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type): void {
  if ($entity_type->id() === 'webform_submission') {
    // Add a base field to webform_submission entities.
    $fields['message_id'] = BaseFieldDefinition::create('string')
      ->setName('message_id')
      ->setLabel(t('Azure Queue Storage Message Id'))
      ->setTargetEntityTypeId('webform_submission');
    // Add a base field to webform_submission entities.
    $fields['message_retries'] = BaseFieldDefinition::create('integer')
      ->setName('message_retries')
      ->setLabel(t('Azure Queue Storage Message Retries'))
      ->setTargetEntityTypeId('webform_submission');
  }
}

/**
 * Implements hook_mail().
 */
function wateraid_azure_storage_mail($key, &$message, $params): void {
  switch ($key) {
    case 'notify_report':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = new TranslatableMarkup('Azure Storage Queue Error Report for "@site" (@env)', [
        '@site' => \Drupal::config('system.site')->get('name'),
        '@env' => $_ENV['AH_SITE_ENVIRONMENT'] ?? 'local',
      ]);
      $message['body'][] = Html::escape($params['body']);
      break;
  }
}

/**
 * Implements hook_cron().
 *
 * There is always the off-chance that Webform Submissions do not execute their
 * initial attempt of sending to Azure, which would then also not consider the
 * items for re-sending.
 * For this we need to ensure such cases and have a cron task to look for any
 * Submissions that still need sending to Azure.
 *
 * @see \Drupal\wateraid_azure_storage\Plugin\QueueWorker\AzureStorageQueueWorker
 */
function wateraid_azure_storage_cron(): void {

  $webform_ids = \Drupal::entityQuery('webform')
    ->condition('category', DonationConstants::DONATION_CATEGORY)
    ->condition('status', WebformInterface::STATUS_OPEN)
    ->execute();

  if (empty($webform_ids)) {
    return;
  }

  $webforms = Webform::loadMultiple($webform_ids);
  $webform_ids = [];
  foreach ($webforms as $webform) {
    $handlers = $webform->getHandlers('wateraid_azure_storage_queue');
    // There should only ever be one because the cardinality of
    // AzureStorageQueueWebformHandler is set to
    // WebformHandlerInterface::CARDINALITY_SINGLE but loop through all returned
    // as we don't know if the name was altered when the handler was added.
    foreach ($handlers as $handler) {
      // It is not enough to check on existence only, we also need to ensure the
      // handler is enabled and the cron retries are as well. More eligibility
      // checks are at AzureStorageQueueWebformService::postWebformSubmission().
      if ($handler instanceof WebformHandlerInterface && $handler->getStatus() === TRUE) {
        $configuration = $handler->getConfiguration();
        $settings = $configuration['settings'] ?? [];
        $queue_retry = (bool) ($settings['cron']['queue_retry'] ?? FALSE);
        if ($queue_retry === TRUE) {
          $webform_ids[] = $webform->id();
        }
      }
    }
  }

  $query = \Drupal::entityTypeManager()->getStorage('webform_submission')->getQuery();

  // We use this timestamp to offset any old Webform Submissions without a
  // "message_id" or "message_retries" field value that were dating from before
  // the rollout of the Azure Integration. Old submissions were already sent to
  // Azure via the WaterAid CSV export but we wouldn't want to send those again.
  $wateraid_azure_storage_2021_06_01_00_00_00 = 1622502000;

  $webform_submission_ids = $query
    ->accessCheck(FALSE)
    ->condition('webform_id', $webform_ids, 'IN')
    ->condition('created', $wateraid_azure_storage_2021_06_01_00_00_00, '>=')
    ->notExists('message_id')
    ->notExists('message_retries')
    ->execute();

  if (empty($webform_submission_ids)) {
    return;
  }

  foreach ($webform_submission_ids as $webform_submission_id) {

    // Create a new message only containing the Webform Submission Id.
    $message = (new AzureStorageQueueMessage)->setId($webform_submission_id);

    // Add to internal queue for re-attempt on cron. Retries and appropriate
    // logging and reporting is handled via the AzureStorageQueueWorker.
    if ($item_id = \Drupal::queue('wateraid_azure_storage_queue')->createItem($message)) {
      \Drupal::service('logger.channel.wateraid_azure_storage')->info('Submission ID: %sid queued for retry with Queue Item ID %item_id', [
        '%sid' => $webform_submission_id,
        '%item_id' => $item_id,
      ]);
    }
  }
}
