<?php

/**
 * @file
 * Install file for wateraid_donation_forms feature module.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\block\Entity\Block;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\wateraid_donation_forms\DonationConstants;
use Drupal\webform\Entity\Webform;
use Drupal\webform\WebformInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Import/revert config.
 */
function wateraid_donation_forms_update_8001(): TranslatableMarkup {
  /** @var \Drupal\config_update\ConfigReverter $reverter */
  $reverter = \Drupal::service('config_update.config_update');

  $reverter->revert('entity_form_display', 'node.donation_form.default');
  $reverter->revert('entity_view_display', 'node.donation_form.default');
  $reverter->revert('entity_view_display', 'node.donation_form.teaser');

  return t('Update test donation form.');
}

/**
 * Implements hook_update_depenencies().
 */
function wateraid_donation_forms_update_depenencies(): array {
  $dependencies['wateraid_donation_forms'][8001] = [
    'wateraid_base_core' => 8001,
  ];

  return $dependencies;
}

/**
 * Enable the wateraid_webform_encrypt module.
 */
function wateraid_donation_forms_update_8002(): void {
  \Drupal::service('module_installer')->install(['wateraid_webform_encrypt']);
}

/**
 * Set the mailer options.
 */
function wateraid_donation_forms_update_8003(): void {
  \Drupal::service('module_installer')->install(['swiftmailer']);
  \Drupal::configFactory()->getEditable('mailsystem.settings')
    ->set('defaults.formatter', 'swiftmailer')
    ->set('defaults.sender', 'swiftmailer')
    ->save(TRUE);
}

/**
 * Create donation help menu items.
 */
function wateraid_donation_forms_update_8007(): void {
  $menu_items = [
    [
      'menu_name' => 'donation-help',
      'title' => '<none>',
      'link' => ['uri' => 'route:<nolink>'],
      'content_area' => 'Mon to Fri, 8am-6pm. Free from any landline',
    ],
    [
      'menu_name' => 'donation-help',
      'title' => 'Call: 0300 123 4341',
      'link' => ['uri' => 'tel:03001234341'],
    ],
    [
      'menu_name' => 'donation-help',
      'title' => 'Message us',
      'link' => ['uri' => 'mailto:supportercare@wateraid.org'],
    ],
  ];

  foreach ($menu_items as $menu_item) {
    $menu_link = MenuLinkContent::create($menu_item);
    $menu_link->save();
  }

  // Remove old donation contact block.
  $block = Block::load('donationcontact');
  $block->delete();

}

/**
 * Update all existing CTA widgets to use the new donation form.
 */
function wateraid_donation_forms_update_8008(): void {
  $query = \Drupal::entityQuery('paragraph')
    ->condition('type', 'donation_cta_widget_embed');
  $entity_ids = $query->execute();
  $entities_loaded = \Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($entity_ids);
  /** @var Paragraph $entity */
  foreach ($entities_loaded as $entity) {
    $entity->set('field_cta_widget_donation_form', 'donation_form');
    $entity->save();
  }
}

/**
 * Uninstall test payment modules.
 */
function wateraid_donation_forms_update_8009(): void {
  \Drupal::service('module_installer')->uninstall([
    'wateraid_donation_forms_test',
    'wateraid_test_stripe_payment_testing',
  ]);
}

/**
 * Update donation forms custom JS to interface with new DonationAmount widget.
 */
function wateraid_donation_forms_update_8010(&$sandbox): TranslatableMarkup {

  $webform_ids = \Drupal::entityQuery('webform')
    ->condition('category', DonationConstants::DONATION_CATEGORY)
    ->condition('status', WebformInterface::STATUS_OPEN)
    ->execute();

  if (empty($webform_ids)) {
    return t('No updates required.');
  }

  $webforms = Webform::loadMultiple($webform_ids);
  foreach ($webforms as $webform) {
    $javascript = $webform->getJavaScript();
    if (!empty($javascript)) {
      // Fix the broken events from refactored DonationsWebformAmount.
      $search = '#edit-donation-amount-frequency .ui-button';
      $replace = '#edit-donation-amount-frequency label';
      $webform->setJavaScript(str_replace($search, $replace, $javascript));
      $webform->save();
    }
  }

  return t('Updates finished.');
}

/**
 * Move donation form currency setting from handler to 3rd party settings.
 */
function wateraid_donation_forms_update_8011(&$sandbox): TranslatableMarkup {

  $webform_ids = \Drupal::entityQuery('webform')
    ->condition('category', DonationConstants::DONATION_CATEGORY)
    ->condition('status', WebformInterface::STATUS_OPEN)
    ->execute();

  if (empty($webform_ids)) {
    return t('No updates required.');
  }

  $webforms = Webform::loadMultiple($webform_ids);
  foreach ($webforms as $webform) {
    /** @var \Drupal\webform\Plugin\WebformHandlerPluginCollection $handlers */
    $handlers = $webform->getHandlers('wateraid_donations');
    if ($handlers->count() > 0) {
      /** @var \Drupal\wateraid_donation_forms\Plugin\WebformHandler\DonationsWebformHandler $handler */
      $handler = $handlers->getIterator()->current();
      $config = $handler->getConfiguration();
      $currency = $config['settings']['currency'];
      if ($currency) {
        $webform->setThirdPartySetting('wateraid_donation_forms', 'currency', $currency);
        $webform->save();
      }
    }
  }

  return t('Updates finished.');
}

/**
 * Set wrapper on "webform_select_other" elements created prior 8.x-5.0-beta12.
 */
function wateraid_donation_forms_update_8013(&$sandbox): TranslatableMarkup {

  // Relief load on Webforms by targeting donation webforms that are open.
  $webform_ids = \Drupal::entityQuery('webform')
    ->condition('category', DonationConstants::DONATION_CATEGORY)
    ->condition('status', WebformInterface::STATUS_OPEN)
    ->execute();

  if (empty($webform_ids)) {
    return t('No updates required.');
  }

  $webforms = Webform::loadMultiple($webform_ids);
  foreach ($webforms as $webform) {
    $elements = $webform->getElementsDecoded();
    $changed = FALSE;
    foreach ($elements as $page_key => $page) {
      foreach ($page as $element_key => $element) {
        // Only update elements that miss the #wrapper_type definition to
        // prevent them from being rendered as a fieldset.
        $element_types = ['webform_select_other', 'webform_radios_other'];
        if (is_array($element) && isset($element['#type']) && in_array($element['#type'], $element_types) && !isset($element['#wrapper_type'])) {
          $elements[$page_key][$element_key]['#wrapper_type'] = 'form_element';
          $changed = TRUE;
        }
      }
    }
    if ($changed) {
      $webform->setElements($elements);
      $webform->save();
    }
  }

  return t('Updates finished.');
}

/**
 * Set Webform Options config for ignored in config.
 *
 * Webform.webform_options.* are config ignored, but we need this on all sites,
 * so read from VCS and save to the database.
 *
 * @see https://accessdigital.atlassian.net/browse/WMS-1422
 */
function wateraid_donation_forms_update_8014(&$sandbox): void {
  // Get contents from ignored config and save to db.
  $file_name = 'webform.webform_options.relationship_in_memory';
  $config_file = "/config/default/$file_name.yml";
  $config = Yaml::parse(file_get_contents(dirname(DRUPAL_ROOT) . $config_file));
  if ($config) {
    \Drupal::configFactory()->getEditable($file_name)->setData($config)->save();
  }
}
