<?php

/**
 * @file
 * Install file for wateraid_base_core feature module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\StorageException;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\block\Entity\Block;
use Drupal\block_content\Entity\BlockContent;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\system\Entity\Menu;
use Drupal\taxonomy\Entity\Term;

/**
 * Import new branding image styles.
 */
function wateraid_base_core_update_8001() {
  /** @var \Drupal\config_update\ConfigReverter $reverter */
  $reverter = \Drupal::service('config_update.config_update');
  $reverter->import('classy_paragraphs_style', 'donation_cta_new');
  $reverter->import('classy_paragraphs_style', 'donation_cta_old');

  $reverter->revert('entity_form_display', 'paragraph.hero.default');
  $reverter->revert('entity_view_display', 'block_content.hand_and_text.default');
  $reverter->revert('entity_view_display', 'paragraph.hero.default');
  $reverter->revert('entity_view_display', 'paragraph.hero.hero_short');
  $reverter->revert('entity_view_display', 'paragraph.hero.hero_tall');
  $reverter->revert('field_config', 'paragraph.hero.field_view_mode_selector');

  return t('Import new config and revert existing config for new branding_image image styles.');
}

/**
 * Implements hook_update_N().
 *
 * Enable the metatag_open_graph module.
 */
function wateraid_base_core_update_8002(): void {
  \Drupal::service('module_installer')->install(['metatag_open_graph']);
}

/**
 * Convert fields from text to string.
 */
function wateraid_base_core_update_8003(): void {
  _wateraid_core_update_paragraph_field('field_property_label');
  _wateraid_core_update_paragraph_field('field_property_value');
}

/**
 * Helper function to convert paragraph field from text to string.
 */
function _wateraid_base_core_update_paragraph_field($field_name) {
  $table = 'paragraph__' . $field_name;
  $revision_table = 'paragraph_revision__' . $field_name;
  $entity_type = 'paragraph';

  // Step 1: Get field storage.
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

  // Check if field not found.
  if (is_null($field_storage)) {
    return FALSE;
  }

  $database = \Drupal::database();

  // Step 2: Store data.
  if ($database->schema()->tableExists($table)) {
    // The table data to restore after the update is completed.
    $database->select($table, 'n')->fields('n')->execute()
      ->fetchAll();
    $database->select($revision_table, 'n')->fields('n')->execute()
      ->fetchAll();
  }

  // Step 3: Save new field configs & delete existing fields.
  $new_fields = [];
  foreach ($field_storage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
    $new_field = $field->toArray();
    $new_field['field_type'] = 'string';
    $new_fields[] = $new_field;
    // Delete field.
    $field->delete();
  }

  // Step 4: Create new storage configs from existing.
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'string';
  $new_field_storage['module'] = 'core';
  $new_field_storage['settings'] = [
    'max_length' => 50,
  ];

  // Step 5: Purge deleted fields data.
  // This is required to create new fields.
  field_purge_batch(250);

  // Step 6: Create new fieldstorage.
  FieldStorageConfig::create($new_field_storage)->save();

  // Step 7: Create new fields for all bundles.
  foreach ($new_fields as $new_field) {
    $new_field = FieldConfig::create($new_field);
    $new_field->save();
  }

}

/**
 * Install paragraphs_colour module.
 */
function wateraid_base_core_update_8004(): void {
  \Drupal::service('module_installer')->install(['paragraphs_colour']);
}

/**
 * Alter text field max length.
 */
function wateraid_base_core_update_8005(): void {
  \Drupal::service('module_installer')->install(['maxlength']);

  wateraid_base_core_change_paragraph_text_field_max_length('field_statistic_title', '255');
  wateraid_base_core_change_paragraph_text_field_max_length('field_statistic_details', '255');
  wateraid_base_core_change_paragraph_text_field_max_length('field_rainbow_link_title', '255');
  wateraid_base_core_change_paragraph_text_field_max_length('field_rainbow_link_details', '255');
  wateraid_base_core_change_paragraph_text_field_max_length('field_activation_bar_title', '255');
  wateraid_base_core_change_paragraph_text_field_max_length('field_activation_bar_details', '255');
  wateraid_base_core_change_paragraph_text_field_max_length('field_paragraph_hero_subtext', '255');
}

/**
 * Enable Block Class module.
 */
function wateraid_base_core_update_8006(): void {
  \Drupal::service('module_installer')->install(['block_class']);
}

/**
 * Enable Views Field View module.
 */
function wateraid_base_core_update_8007(): void {
  \Drupal::service('module_installer')->install(['views_field_view']);
}

/**
 * Add access permission for user to see user profiles.
 */
function wateraid_base_core_update_8008(): void {
  \Drupal::service('module_installer')->install(['override_node_options']);
  $roles = ['article_author', 'article_manager'];
  $permissions = [
    'override article authored by option',
    'override article authored on option',
  ];

  foreach ($roles as $role) {
    user_role_grant_permissions($role, $permissions);
  }
}

/**
 * Enable View mode condition module.
 */
function wateraid_base_core_update_8009(): void {
  \Drupal::service('module_installer')->install(['view_mode_condition']);
}

/**
 * Copy date across from field_view_mode_selector to field_hero_style.
 */
function wateraid_base_core_update_8010(): void {

  $query = \Drupal::entityQuery('paragraph')
    ->condition('type', 'hero');
  $entity_ids = $query->execute();
  $entities_loaded = \Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($entity_ids);
  /** @var \Drupal\paragraphs\Entity\Paragraph $entity */
  foreach ($entities_loaded as $entity) {
    $view_mode_value = $entity->get('field_view_mode_selector')->getValue();
    $entity->set('field_hero_style', $view_mode_value[0]['value']);
    $entity->save();
  }
}

/**
 * Fix fields which had their mysql schema updated.
 */
function wateraid_base_core_update_8011(): void {
  $dodgy_fields =
    ['field_statistic_title',
      'field_statistic_details',
      'field_rainbow_link_title',
      'field_rainbow_link_details',
      'field_activation_bar_title',
      'field_activation_bar_details',
      'field_paragraph_hero_subtext',
    ];
  $field_storage_definitions = \Drupal::keyValue('entity.definitions.installed')->get('paragraph.field_storage_definitions');

  $new_definitions = [];

  /** @var \Drupal\field\FieldStorageConfigInterface $storage_definition */
  foreach ($field_storage_definitions as $field_name => $storage_definition) {
    if (in_array($field_name, $dodgy_fields)) {
      $storage_definition->setSetting('max_length', '255');
    }
    $new_definitions[$field_name] = $storage_definition;
  }
  \Drupal::keyValue('entity.definitions.installed')->set('paragraph.field_storage_definitions', $new_definitions);
}

/**
 * Delete blocks and menus that arent used anymore.
 */
function wateraid_base_core_update_8012(): void {
  $blocks_to_remove = [
    'getinvolved',
    'usefullinks',
    'usefulinfo',
  ];
  foreach ($blocks_to_remove as $block) {
    $block = Block::load($block);
    $block->delete();
  }

  $menus_to_remove = [
    'useful-links',
    'useful-info',
    'get-involved',
  ];
  foreach ($menus_to_remove as $menu) {
    $menu = Menu::load($menu);
    $menu->delete();
  }
}

/**
 * Additional fixes to field storage schema.
 *
 * @See wateraid_base_core_update_8011
 * @See https://insight.acquia.com/support/tickets/402875
 */
function wateraid_base_core_update_8013(): void {
  $dodgy_fields =
    ['field_statistic_title',
      'field_statistic_details',
      'field_rainbow_link_title',
      'field_rainbow_link_details',
      'field_activation_bar_title',
      'field_activation_bar_details',
      'field_paragraph_hero_subtext',
    ];

  foreach ($dodgy_fields as $field_name) {
    $field_storage_definition = \Drupal::keyValue('entity.storage_schema.sql')->get('paragraph.field_schema_data.' . $field_name);
    $field_storage_definition['paragraph__' . $field_name]['fields'][$field_name . '_value']['length'] = 255;
    $field_storage_definition['paragraph_revision__' . $field_name]['fields'][$field_name . '_value']['length'] = 255;
    \Drupal::keyValue('entity.storage_schema.sql')->set('paragraph.field_schema_data.' . $field_name, $field_storage_definition);
  }

}

/**
 * Add Charity block to footer.
 */
function wateraid_base_core_update_8014(): void {
  $block = BlockContent::create([
    'info' => 'Copyright and registration',
    'type' => 'general_text',
    'langcode' => 'en',
    'uuid' => '594baf67-34aa-44aa-8ec2-cc84801e3d52',
  ]);
  $block->save();
}

/**
 * Enable block permissions modules.
 */
function wateraid_base_core_update_8015(): void {
  \Drupal::service('module_installer')->install(['block_permissions', 'block_weight_permissions']);
}

/**
 * Remove Footer Logo block.
 */
function wateraid_base_core_update_8016(): void {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('block');
  $entities = $storage_handler->loadMultiple(['footerlogo']);
  $storage_handler->delete($entities);
}

/**
 * Enable shield (again) on all environments.
 */
function wateraid_base_core_update_8018(): void {
  \Drupal::service('module_installer')->install(['shield']);
}

/**
 * Update homepage CTA widget title.
 */
function wateraid_base_core_update_8019(): void {
  \Drupal::service('features.manager')->import(['wateraid_base_core']);

  $query = \Drupal::entityQuery('paragraph')
    ->condition('id', 8791);
  $entity_ids = $query->execute();
  $entity = \Drupal::entityTypeManager()->getStorage('paragraph')->load(array_shift($entity_ids));
  $entity->set('field_title_heading_large', 'Make a Donation');
  $entity->save();
}

/**
 * Update Donation CTA widget link.
 */
function wateraid_base_core_update_8020(): void {

  /** @var \Drupal\block\Entity\Block $block */
  foreach (['wateraiddonationctawidget', 'wateraiddonationctawidget_2'] as $block_name) {
    $block = Block::load($block_name);
    $block_settings = $block->get('settings');
    unset($block_settings['donation_form']);
    $block_settings['link_url'] = 'donate';
    $block->set('settings', $block_settings);
    $block->save();
  }
}

/**
 * Update social media links block to appear on donation pages.
 */
function wateraid_base_core_update_8021(): void {
  $block = Block::load('socialmedialinks');
  $block->set('visibility', []);
  $block->save();
}

/**
 * Enable views bulk operations.
 */
function wateraid_base_core_update_8023(): void {
  \Drupal::service('module_installer')->install(['views_bulk_operations']);
}

/**
 * Enable views bulk operations.
 */
function wateraid_base_core_update_8024(): void {
  \Drupal::service('module_installer')->install(['workbench_moderation_actions']);
}

/**
 * Switch to the new homepage nodes.
 */
function wateraid_base_core_update_8025(): void {
  $site_name = \Drupal::config('system.site')->get('name');
  $nid = NULL;
  switch ($site_name) {
    case 'WaterAid UK':
      $nid = 3331;
      break;

    case 'WaterAid Canada':
      $nid = 3141;
      break;

    case 'WaterAid America':
      $nid = 3231;
      break;
  }

  if ($nid) {
    $config = \Drupal::service('config.factory')->getEditable('system.site');
    $config->set('page.front', '/node/' . $nid)->save();

    $config = \Drupal::service('config.factory')->getEditable('wateraid_base_theme.settings');
    $config->set('hide_home_page_video', 1)->save();
  }
}

/**
 * Modify URL aliases for Sweden site to be language neutral.
 */
function wateraid_base_core_update_8026(): void {
  $language = \Drupal::languageManager()->getDefaultLanguage()->getId();

  // Execute the DB queries only for the Sweden site.
  if ($language == 'sv') {
    // Delete duplicate aliases for a source.
    $database = \Drupal::database();
    $database->query("DELETE t1 FROM url_alias t1 INNER JOIN url_alias t2 WHERE t1.pid < t2.pid AND t1.source = t2.source")
      ->execute();

    // Make all aliases language neutral.
    $database->update('url_alias')
      ->fields([
        'langcode' => 'und',
      ])
      ->condition('langcode', 'und', '!=')
      ->execute();

    // Enable the language_neutral_aliases module.
    \Drupal::service('module_installer')->install(['language_neutral_aliases']);
  }
}

/**
 * Activate and configure the responsible responsive image style module.
 */
function wateraid_base_core_update_8027(): void {
  \Drupal::service('module_installer')->install(['media_responsive_thumbnail']);

  $config_factory = \Drupal::configFactory();

  foreach ($config_factory->listAll('core.entity_view_display') as $config_thingy_name) {
    $changed = FALSE;

    $configThingy = $config_factory->getEditable($config_thingy_name);
    $contentConfigurations = $configThingy->get('content');

    foreach ($contentConfigurations as $contentName => $contentConfig) {
      // Check to see if this is a responsive image type.
      if (isset($contentConfig['settings']['use_responsive_image']) && $contentConfig['settings']['use_responsive_image'] == 1) {
        // Set the new field formatter type.
        $configThingy->set('content.' . $contentName . '.type', 'media_responsive_thumbnail');
        // Clear out the setting that informed the config item to use the
        // responsive image styles.
        $configThingy->clear('content.' . $contentName . '.settings.use_responsive_image');
        $changed = TRUE;
      }
    }

    if ($changed) {
      $configThingy->save(TRUE);
    }
  }
}

/**
 * Install the WaterAid reporting module.
 */
function wateraid_base_core_update_8028(): void {
  \Drupal::service('module_installer')->install(['wateraid_site_reports']);
}

/**
 * Remove field_title_with_link config from the configuration table.
 */
function wateraid_base_core_update_8029(): void {
  $query = \Drupal::database()->delete('config');
  $query->condition('name', 'field.field.paragraph.listing_item.field_title_with_link');
  $query->execute();
}

/**
 * Enable acquia_purge module.
 */
function wateraid_base_core_update_8030(): void {
  \Drupal::service('module_installer')->install([
    'acquia_purge',
    'purge_ui',
  ]);
}

/**
 * Remove field_title_with_link cache & dependencies.
 */
function wateraid_base_core_update_8031(): void {
  // Remove corrupted field from config & cache_config.
  $query = \Drupal::database()->delete('cache_config');
  $query->condition('cid', 'field.field.paragraph.listing_item.field_title_with_link');
  $query->execute();

  // Taking care of dependencies for form_display and view_display here by
  // modifying field dependencies, so that config export doesn't contain them.
  $removeField = 'field.field.paragraph.listing_item.field_title_with_link';
  $removeDependencyFrom = [
    'core.entity_form_display.paragraph.listing_item.default',
    'core.entity_view_display.paragraph.listing_item.default',
  ];
  $config = Drupal::service('config.factory');
  foreach ($removeDependencyFrom as $field) {
    $data = $config->getEditable($field)->get();
    $dependencies = $data['dependencies'];
    if (($key = array_search($removeField, $dependencies['config'])) !== FALSE) {
      unset($dependencies['config'][$key]);
      $data['dependencies'] = $dependencies;
      $config->getEditable($field)->setData($data)->save();
    }
  }
}

/**
 * Enable config_split module and import defined splits.
 */
function wateraid_base_core_update_8032(): void {
  \Drupal::service('module_installer')->install([
    'config_split',
    'config_filter',
  ]);

  $config_path = dirname(DRUPAL_ROOT) . '/config/default';

  $config_storage = \Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $config_splits = glob($config_path . '/config_split.config_split.*.yml');

  foreach ($config_splits as $split) {
    $split_name = basename($split, '.yml');
    $config_storage->write($split_name, $source->read($split_name));
  }
}

/**
 * Implements hook_update_depenencies().
 */
function wateraid_base_core_update_dependencies() {
  $dependencies = [];

  $dependencies['file'][8001]['media_entity'] = 8201;
  $dependencies['focal_point'][8004]['media_entity'] = 8201;

  return $dependencies;
}

/**
 * Increased max char limit on Media Captions.
 */
function wateraid_base_core_update_8035(): void {
  // Init vars.
  $new_length = 300;
  $entity_type_id = 'media';
  $field_name = 'field_media_caption';
  $db = \Drupal::database();

  // Update field schema.
  $table = $entity_type_id . '__' . $field_name;
  $table_revision = $entity_type_id . '_revision__' . $field_name;
  $new_field = [
    'type' => 'varchar',
    'length' => $new_length,
    'not null' => TRUE,
  ];
  $col_name = $field_name . '_value';
  $db->schema()->changeField($table, $col_name, $col_name, $new_field);
  $db->schema()->changeField($table_revision, $col_name, $col_name, $new_field);

  // Update field storage in config.
  $config = \Drupal::configFactory()->getEditable("field.storage.$entity_type_id.$field_name");
  $settings = $config->get('settings');
  $settings['max_length'] = $new_length;
  $config->set('settings', $settings)->save();
}

/**
 * Fix undefined data-langcode from embedded entities.
 */
function wateraid_base_core_update_8036(&$sandbox) {

  if (!isset($sandbox['progress'])) {

    $site_name = \Drupal::configFactory()->get('system.site')->get('name');

    // Only run on Washmatters.
    if ($site_name !== 'WASH Matters') {
      return t('Nothing to update for @site.', ['@site' => $site_name]);
    }

    $total_nids = \Drupal::database()
      ->select('node__body', 'b')
      ->fields('b', ['entity_id'])
      ->condition('body_value', '%drupal-entity%', 'LIKE')
      ->execute()
      ->fetchCol();

    if (empty($total_nids)) {
      return t('Nothing to update.');
    }

    $sandbox['progress'] = 0;
    $sandbox['limit'] = 50;
    $sandbox['total'] = count($total_nids);
  }

  $batch_nids = \Drupal::database()
    ->select('node__body', 'b')
    ->fields('b', ['entity_id'])
    ->condition('body_value', '%drupal-entity%', 'LIKE')
    ->range($sandbox['progress'], $sandbox['progress'] + $sandbox['limit'])
    ->execute()
    ->fetchCol();

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $node_storage->loadMultiple($batch_nids);

  _wateraid_base_core_update_langcode_markup($sandbox, $nodes, 'body');

  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];
}

/**
 * Fix undefined data-langcode from embedded entities in paragraphs.
 */
function wateraid_base_core_update_8037(&$sandbox) {

  if (!isset($sandbox['progress'])) {

    $site_name = \Drupal::configFactory()->get('system.site')->get('name');

    // Only run on Washmatters.
    if ($site_name !== 'WASH Matters') {
      return t('Nothing to update for @site.', ['@site' => $site_name]);
    }

    $total_pids = \Drupal::database()
      ->select('paragraph__field_paragraph_content', 'b')
      ->fields('b', ['entity_id'])
      ->condition('field_paragraph_content_value', '%drupal-entity%', 'LIKE')
      ->execute()
      ->fetchCol();

    if (empty($total_pids)) {
      return t('Nothing to update.');
    }

    $sandbox['progress'] = 0;
    $sandbox['limit'] = 50;
    $sandbox['total'] = count($total_pids);
  }

  $batch_pids = \Drupal::database()
    ->select('paragraph__field_paragraph_content', 'b')
    ->fields('b', ['entity_id'])
    ->condition('field_paragraph_content_value', '%drupal-entity%', 'LIKE')
    ->range($sandbox['progress'], $sandbox['progress'] + $sandbox['limit'])
    ->execute()
    ->fetchCol();

  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $paragraph_storage->loadMultiple($batch_pids);

  _wateraid_base_core_update_langcode_markup($sandbox, $paragraphs, 'field_paragraph_content');

  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];
}

/**
 * Updates the embedded entity markup.
 *
 * @param array $sandbox
 *   Sandbox variable by reference.
 * @param \Drupal\Core\Entity\EntityInterface[] $entities
 *   An array of entity objects indexed by their IDs.
 * @param string $field
 *   An entity field machine name.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _wateraid_base_core_update_langcode_markup(array &$sandbox, array $entities, string $field = 'body'): void {

  foreach ($entities as $entity) {
    $sandbox['progress']++;
    $matches = [];
    // Check if the entity has embedded entities in the expected format.
    preg_match_all('/<drupal-entity(.*?)<\/drupal-entity>/', $entity->get($field)->value, $matches);
    if (empty($matches)) {
      continue;
    }
    $new_body = $entity->get($field)->value;
    // Iterate matches for embedded entities.
    foreach ($matches[0] as $match) {
      // Check if the data-langcode attr is missing.
      if (strpos($match, 'data-langcode=') === FALSE) {
        // If so, add the data-langcode attr into the embedded entity markup.
        $new_markup = str_replace('></drupal-entity>', ' data-langcode="en"></drupal-entity>', $match);
        // Replace the original or altered with the new value in the body field.
        $new_body = str_replace($match, $new_markup, $new_body);
      }
    }
    // Check if body has required changes and save if so.
    if ($new_body !== $entity->get($field)->value) {
      $entity->{$field}->value = $new_body;
      $entity->save();
    }
  }
}

/**
 * Increase the length of "field_activation_bar_title" to 1000 characters.
 */
function wateraid_base_core_update_8038(): void {
  $database = \Drupal::database();
  $database->query("ALTER TABLE paragraph__field_activation_bar_title MODIFY field_activation_bar_title_value VARCHAR(1000)");
  $database->query("ALTER TABLE paragraph_revision__field_activation_bar_title MODIFY field_activation_bar_title_value VARCHAR(1000)");

  $storage_key = 'paragraph.field_schema_data.field_activation_bar_title';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['paragraph__field_activation_bar_title']['fields']['field_activation_bar_title']['length'] = 1000;
  $field_schema['paragraph_revision__field_activation_bar_title']['fields']['field_activation_bar_title']['length'] = 1000;
  $storage_schema->set($storage_key, $field_schema);
  // Update field configuration.
  $config = \Drupal::configFactory()->getEditable('field.storage.paragraph.field_activation_bar_title');
  $config->set('settings.max_length', 1000);
  $config->save(1000);
}

/**
 * Fix mismatched entities for set fields.
 *
 * Set fields are media.field_media_caption and
 * paragraph.field_activation_bar_title.
 *
 * Implements hook_update_N().
 */
function wateraid_base_core_update_8039(): TranslatableMarkup {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();
  $entity_type_ids = [];
  $change_summary = \Drupal::service(
    'entity.definition_update_manager'
  )->getChangeSummary();

  foreach ($change_summary as $entity_type_id => $change_list) {
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    // Checks any definitions having a state of mismatch or need of updating.
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
    $entity_type_ids[] = $entity_type_id;
  }

  drupal_flush_all_caches();

  return t("Installed/Updated the entity type(s): @entity_type_ids", [
    '@entity_type_ids' => implode(', ', $entity_type_ids),
  ]);
}

/**
 * Add Charity block to footer if it doesn't already exist.
 *
 * @see wateraid_base_core_update_8014()
 * @see wateraid_create_block_content()
 */
function wateraid_base_core_update_8040(): void {
  $uuid = '594baf67-34aa-44aa-8ec2-cc84801e3d52';
  if (is_null(\Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid))) {
    $block = BlockContent::create([
      'info' => 'Copyright and registration',
      'type' => 'general_text',
      // Default content taken from wateraid_create_block_content().
      'body' => [
        'value' => '<p class="fine-print">Registration numbers: England and Wales 288701, Scotland SC039479. 47-49 Durham Street, London, SE11 5JD.<br />
WaterAid - water charity | © Copyright WaterAid - All rights reserved.<br />
<a href="/uk/terms-and-conditions">Terms and conditions</a> | <a href="/uk/privacy-policy">Privacy policy</a></p>',
        'format' => 'wateraid_editor',
      ],
      'uuid' => $uuid,
    ]);
    $block->save();
  }
}

/**
 * Install new dependency of Imagemagick on Sophron.
 */
function wateraid_base_core_update_8041(): void {
  \Drupal::service('module_installer')->install(['sophron']);
}

/**
 * Install moved dependencies jQuery UI and jQuery UI CheckboxRadio.
 */
function wateraid_base_core_update_8042(): void {
  \Drupal::service('module_installer')->install(['jquery_ui', 'jquery_ui_checkboxradio']);
}

/**
 * Correct node path aliases for SE from "en", "sv" to "und".
 */
function wateraid_base_core_update_8044() {

  $site_name = \Drupal::configFactory()->get('system.site')->get('name');

  // Only run on WaterAid Sverige (Sweden).
  if ($site_name !== 'WaterAid Sverige') {
    return t('Nothing to update for @site.', ['@site' => $site_name]);
  }

  $db = \Drupal::database();
  $path_aliases = $db->query('
    SELECT langcode, path, alias
    FROM path_alias
    WHERE path LIKE \'/node/%\' AND langcode <> \'und\' AND status = 1
    AND path NOT IN (
        SELECT path FROM path_alias
        WHERE path LIKE \'/node/%\' AND langcode = \'und\' AND status = 1
    )
  ')->fetchAll();

  foreach ($path_aliases as $path_alias) {
    /** @var \Drupal\path_alias\PathAliasInterface $path_alias_new */
    // Create an 'und' variant.
    $path_alias_new = \Drupal::entityTypeManager()->getStorage('path_alias')->create([
      'path' => $path_alias->path,
      'alias' => $path_alias->alias,
      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
    ]);
    $path_alias_new->save();
  }

}

/**
 * Increased max char limit on Paragraph Listing Item Details.
 *
 * @see wateraid_base_core_update_8035()
 */
function wateraid_base_core_update_8045(): void {

  // Init vars.
  $new_length = 300;
  $entity_type_id = 'paragraph';
  $field_name = 'field_listing_item_details';
  $db = \Drupal::database();

  // Update field schema.
  $table = $entity_type_id . '__' . $field_name;
  $table_revision = $entity_type_id . '_revision__' . $field_name;
  $new_field = [
    'type' => 'varchar',
    'length' => $new_length,
    'not null' => TRUE,
  ];
  $col_name = $field_name . '_value';
  $db->schema()->changeField($table, $col_name, $col_name, $new_field);
  $db->schema()->changeField($table_revision, $col_name, $col_name, $new_field);

  // Update field storage in config.
  $config = \Drupal::configFactory()->getEditable("field.storage.$entity_type_id.$field_name");
  $settings = $config->get('settings');
  $settings['max_length'] = $new_length;
  $config->set('settings', $settings)->save();
}

/**
 * Migrate existing hero images into separate teaser image fields.
 */
function wateraid_base_core_update_8046(&$sandbox): void {
  if (!isset($sandbox['config_imported'])) {
    // Perform initial field config installation ahead of the migration.
    _wateraid_base_core_update_teaser_setup_config($sandbox);
  }

  // Define the field mapping for each content type.
  $field_mapping = [];

  $field_mapping['article'] = [
    'source_field' => 'field_article_hero_image',
    'destination_field' => 'field_teaser_image',
  ];

  $field_mapping['donation_landing_page'] = [
    'source_field' => 'field_hero',
    'paragraph_source_field' => 'field_hero_image',
    'destination_field' => 'field_teaser_image',
  ];

  $field_mapping['flexible_content'] = [
    'source_field' => 'field_hero',
    'paragraph_source_field' => 'field_hero_image',
    'destination_field' => 'field_teaser_image',
  ];

  // Perform the migration.
  _wateraid_base_core_update_teaser_migration($sandbox, $field_mapping);
}

/**
 * Migrate existing hero images into separate teaser image fields.
 */
function wateraid_base_core_update_8047(&$sandbox): void {
  if (!isset($sandbox['config_imported'])) {
    // Perform initial field config installation ahead of the migration.
    _wateraid_base_core_update_teaser_setup_config($sandbox);
  }

  // Define the field mapping for each content type.
  $field_mapping = [
    'article' => [
      'source_field' => 'field_article_hero_image',
      'destination_field' => 'field_teaser_image',
    ],
    'country_details' => [
      'source_field' => 'field_hero',
      'paragraph_source_field' => 'field_hero_image',
      'paragraph_source_fallback_field' => 'field_hero_image_mobile',
      'destination_field' => 'field_teaser_image',
    ],
    'donation_landing_page' => [
      'source_field' => 'field_hero',
      'paragraph_source_field' => 'field_hero_image',
      'paragraph_source_fallback_field' => 'field_hero_image_mobile',
      'destination_field' => 'field_teaser_image',
    ],
    'event' => [
      'source_field' => 'field_event_hero_image',
      'destination_field' => 'field_teaser_image',
    ],
    'flexible_content' => [
      'source_field' => 'field_hero',
      'paragraph_source_field' => 'field_hero_image',
      'paragraph_source_fallback_field' => 'field_hero_image_mobile',
      'destination_field' => 'field_teaser_image',
    ],
    'filtered_landing_page' => [
      'source_field' => 'field_article_hero_image',
      'destination_field' => 'field_teaser_image',
    ],
    'get_involved' => [
      'source_field' => 'field_event_hero_image',
      'destination_field' => 'field_teaser_image',
    ],
    'press_and_media' => [
      'source_field' => 'field_publication_image',
      'destination_field' => 'field_teaser_image',
    ],
    'press_and_media_flexible' => [
      'source_field' => 'field_hero',
      'paragraph_source_field' => 'field_hero_image',
      'paragraph_source_fallback_field' => 'field_hero_image_mobile',
      'destination_field' => 'field_teaser_image',
    ],
    'publication' => [
      'source_field' => 'field_publication_image',
      'destination_field' => 'field_teaser_image',
    ],
    'stories' => [
      'source_field' => 'field_article_hero_image',
      'destination_field' => 'field_teaser_image',
    ],
    'shorthand_story' => [
      'source_field' => 'field_media_thumbnail',
      'destination_field' => 'field_teaser_image',
    ],
  ];

  // Perform the migration.
  _wateraid_base_core_update_teaser_migration($sandbox, $field_mapping);
}

/**
 * Helper function to install teaser field config ahead of migration.
 */
function _wateraid_base_core_update_teaser_setup_config(&$sandbox): void {
  /** @var \Drupal\config_update\ConfigReverter $reverter */
  $reverter = \Drupal::service('config_update.config_update');

  // Field dependencies (config_name => config_type).
  $field_configs = [
    'node.field_teaser_image' => 'field_storage_config',
    'node.article.field_teaser_image' => 'field_config',
    'node.donation_landing_page.field_teaser_image' => 'field_config',
    'node.flexible_content.field_teaser_image' => 'field_config',
    'node.country_details.field_teaser_image' => 'field_config',
    'node.donation_form.field_teaser_image' => 'field_config',
    'node.event.field_teaser_image' => 'field_config',
    'node.filtered_landing_page.field_teaser_image' => 'field_config',
    'node.focused_engagement_tool.field_teaser_image' => 'field_config',
    'node.get_involved.field_teaser_image' => 'field_config',
    'node.get_involved_all_and_everyone.field_teaser_image' => 'field_config',
    'node.press_and_media.field_teaser_image' => 'field_config',
    'node.press_and_media_flexible.field_teaser_image' => 'field_config',
    'node.publication.field_teaser_image' => 'field_config',
    'node.standard_page.field_teaser_image' => 'field_config',
    'node.stories.field_teaser_image' => 'field_config',
    'node.shorthand_story.field_teaser_image' => 'field_config',
  ];

  foreach ($field_configs as $config_name => $config_type) {
    \Drupal::logger('wateraid_base_core')->notice(t('Installing config: @config', [
      '@config' => $config_type . '.' . $config_name,
    ]));

    $config_exists = (bool) $reverter->revert($config_type, $config_name);

    // Note that the config import only detects files in config/install
    // and config/optional within enabled modules and the installation profile.
    if ($config_exists === FALSE) {
      $reverter->import($config_type, $config_name);
    }
  }

  // Flag to indicate that the one-time field setup has finished.
  $sandbox['config_imported'] = TRUE;
}

/**
 * Helper function to migrate hero images to new teaser field.
 */
function _wateraid_base_core_update_teaser_migration(&$sandbox, $mapping) {
  $content_types = array_keys($mapping);

  // Get node IDs for the relevant content types.
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', $content_types, 'IN')
    ->execute();

  if (!isset($sandbox['progress'])) {
    if (empty($nodes)) {
      return t('Nothing to update.');
    }

    // Initialise settings.
    $sandbox['progress'] = 0;
    $sandbox['limit'] = 10;
    $sandbox['total'] = count($nodes);
    $sandbox['skipped'] = [];
    $sandbox['updated'] = [];
  }

  // Load a subset of the node within out iteration range.
  $batch = array_slice($nodes, $sandbox['progress'], $sandbox['limit']);
  $node_batch = Node::loadMultiple($batch);

  foreach ($node_batch as $node) {
    $mapping_config = $mapping[$node->bundle()];
    $source_field = $mapping_config['source_field'];
    $field = NULL;
    $target_id = NULL;

    if ($node->hasField($source_field) && $node->get($source_field)->first()) {
      // Field exists and is populated.
      $target = $node->get($source_field)->first()->get('entity')->getTarget();
      if ($target) {
        $field = $target->getValue();
      }

      if ($field instanceof Media) {
        $target_id = $field->id();
      }
      elseif ($field instanceof Paragraph && isset($mapping_config['paragraph_source_field'])) {
        $paragraphs_field = $mapping_config['paragraph_source_field'];
        if ($field->hasField($paragraphs_field)) {
          if ($field->get($paragraphs_field)->first()) {
            $target_id = $field->get($paragraphs_field)->first()->getValue()['target_id'];
          }
          elseif (array_key_exists('paragraph_source_fallback_field', $mapping_config)) {
            // Check fallback field.
            $fallback_field = $mapping_config['paragraph_source_fallback_field'];
            if ($field->hasField($fallback_field) && $field->get($fallback_field)->first()) {
              $target_id = $field->get($fallback_field)->first()->getValue()['target_id'];
            }
          }
        }
      }
    }

    if (!empty($target_id)) {
      $destination_field_machine_name = $mapping_config['destination_field'];

      // Check destination field exists and is unpopulated.
      if ($node->hasField($destination_field_machine_name) && empty($node->get($destination_field_machine_name)->getValue())) {
        $node->set($destination_field_machine_name, $target_id);
        try {
          $node->save();
          $sandbox['updated'][] = $node->id();
        }
        catch (StorageException $e) {
          \Drupal::logger('wateraid_base_core')->error(t('Failed to save: @nid', ['@nid' => $node->id()]));
        }
      }
      else {
        $sandbox['skipped'][] = $node->id();
      }

    }
    else {
      $sandbox['skipped'][] = $node->id();
    }
  }

  $updated = count($sandbox['updated']);
  $skipped = count($sandbox['skipped']);
  $total = $updated + $skipped;
  $sandbox['progress'] = $total;

  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];

  \Drupal::logger('wateraid_base_core')->notice(t('Progress: @progress', [
    '@progress' => $sandbox['progress'] . '/' . $sandbox['total'],
  ]));

  if ($sandbox['progress'] === $sandbox['total'] && !empty($sandbox['skipped'])) {
    \Drupal::logger('wateraid_base_core')->notice(t('Updated: @updated_count | Skipped: @skipped_count | The following nodes were skipped because there was no source data available: @skipped', [
      '@skipped' => implode(', ', $sandbox['skipped']),
      '@updated_count' => $updated,
      '@skipped_count' => $skipped,
    ]));
  }

  return $sandbox;
}

/**
 * Implements hook_update_N().
 *
 * Set undefined "field_is_current_site" taxonomy term field values to 0.
 */
function wateraid_base_core_update_8048(): void {
  $tids = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getQuery()
    ->accessCheck(FALSE)
    ->condition('vid', 'countries')
    ->condition('field_is_current_site', 0, 'IS NULL')
    ->execute();

  $terms = Term::loadMultiple($tids);
  foreach ($terms as $term) {
    $tid = $term->id();
    $term->set('field_is_current_site', 0);
    try {
      $term->save();
    }
    catch (\Exception $e) {
      \Drupal::logger('wateraid_base_core')->error(t('Unable to save taxonomy term @tid', [
        '@tid' => $tid,
      ]));
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Update entity field definitions.
 */
function wateraid_base_core_update_8049() {
  // Updates the entity definitions/fields.
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();

  $entity_type_ids = [];
  $change_summary = \Drupal::service('entity.definition_update_manager')->getChangeSummary();

  // Runs through each entity and updates.
  foreach ($change_summary as $entity_type_id => $change_list) {
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
    $entity_type_ids[] = $entity_type_id;
  }

  return t("Updated the entity types: @entity_type_ids", [
    '@entity_type_ids' => implode(', ', $entity_type_ids),
  ]);
}

/**
 * Fixes issues introduced in shorthand_update_8003.
 */
function wateraid_base_core_update_8050(): void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  $external_assets = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Use externally hosted assets.'))
    ->setDescription(t('If true, stories brought into Drupal will use externally hosted assets instead of self-hosting.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDisplayOptions('view', [
      'settings' => [
        'format' => 'unicode-yes-no',
      ],
      'weight' => 1,
    ])
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'weight' => 1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  // Install the "external_assets" field, not "external_url".
  $definition_update_manager->installFieldStorageDefinition('external_assets', 'shorthand_story', 'shorthand', $external_assets);

  $external_publishing_config = BaseFieldDefinition::create('string')
    ->setLabel(t('Publishing Configuration'))
    ->setDescription(t('The publishing configuration to use for assets.'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ])
    ->setDefaultValue('')
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'string',
      'weight' => 1,
    ])
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => 1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $definition_update_manager->installFieldStorageDefinition('external_publishing_config', 'shorthand_story', 'shorthand', $external_publishing_config);

}

/**
 * Update path aliases on webforms.
 */
function wateraid_base_core_update_8051(&$sandbox): void {
  if (!isset($sandbox['webforms'])) {
    $sandbox['webforms'] = \Drupal::entityTypeManager()->getStorage('webform')->getQuery()
      ->accessCheck(FALSE)
      ->execute();
    $sandbox['total'] = count($sandbox['webforms']);
    $sandbox['#finished'] = $sandbox['current'] = 0;
  }

  if ($sandbox['webforms']) {
    if ($id = array_pop($sandbox['webforms'])) {

      /** @var \Drupal\webform\WebformInterface $webform */
      $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($id);

      if ($webform->getSetting('page')) {
        if (!$webform->getSetting('page_submit_path')) {
          $webform->setSetting('page_submit_path', '/form/' . $id);
          $webform->save();
        }
      }
    }

    $sandbox['current']++;
  }

  if (empty($sandbox['webforms'])) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }

}
