<?php

/**
 * @file
 * WaterAid Base Core module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\DrupalKernel;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsButtonsWidget;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\metatag\Plugin\Field\FieldWidget\MetatagFirehose;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\webform\WebformInterface;

/**
 * Implements template_preprocess_ds_field_minimal().
 */
function template_preprocess_field__wateraid_ds_field_section(&$variables): void {
  $variables['settings'] = $variables['ds-config']['settings'] ?? [];
}

/**
 * Implements template_preprocess_ds_field_wa_list().
 */
function template_preprocess_field__wateraid_ds_field_wa_list(&$variables): void {
  $variables['settings'] = $variables['ds-config']['settings'] ?? [];
}

/**
 * Implements template_preprocess_ds_field_wa_implode().
 */
function template_preprocess_field__wateraid_ds_field_wa_implode(&$variables): void {
  $variables['settings'] = $variables['ds-config']['settings'] ?? [];
}

/**
 * Implements hook_field_widget_info_alter().
 */
function wateraid_base_core_field_widget_info_alter(array &$info): void {
  $info['text_textarea']['field_types'][] = 'text';
  $info['string_textarea']['field_types'][] = 'string';
}

/**
 * Utility to change the max length of a text field.
 *
 * See wateraid_base_core_update_8011().
 *
 * @param string $field_name
 *   Field name.
 * @param int $new_length
 *   Field length in characters.
 *
 * @note DO NOT USE. You also need to update the original field storage definition
 * in the key_value table.
 */
function wateraid_base_core_change_paragraph_text_field_max_length(string $field_name, int $new_length): void {
  // The transaction opens here.
  $txn = \Drupal::database()->startTransaction();
  $paragraph_config_prefix = 'field.storage.paragraph.';
  try {
    // Update field content tables with new max length.
    foreach (['paragraph__', 'paragraph_revision__'] as $prefix) {
      \Drupal::database()->query('
      ALTER TABLE {' . $prefix . $field_name . '}
        MODIFY ' . $field_name . '_value VARCHAR( ' . $new_length . ' )
      ');
    }

    // Update field config record with new max length.
    $result = \Drupal::database()->query("
        SELECT CAST(data AS CHAR(10000) CHARACTER SET utf8)
        FROM {config}
        WHERE name = :field_name
      ", [':field_name' => $paragraph_config_prefix . $field_name]
    );
    $config = $result->fetchField();
    if ($config) {
      // phpcs:ignore
      $config_array = unserialize($config);
      $config_array['settings']['max_length'] = $new_length;
      $new_config = serialize($config_array);
      \Drupal::database()->update('config')
        ->fields(['data' => $new_config])
        ->condition('name', $paragraph_config_prefix . $field_name)
        ->execute();
    }
  }
  catch (Exception $e) {
    // Something went wrong somewhere, so roll back now.
    $txn->rollback();
    // Allow update to be re-run when errors are fixed.
    \Drupal::logger('db_update')->error('Failed to change @field_name field max length: @message', [
      '@field_name' => $field_name,
      '@message' => $e->getMessage(),
    ]);
  }
}

/**
 * Implements hook_clientside_validation_should_validate().
 */
function wateraid_base_core_clientside_validation_should_validate($element): bool {
  // Return false if the maxlength module is in use (don't check non-arrays).
  if (is_array($element) && !empty($element['#pre_render'])) {
    foreach ($element['#pre_render'] as $callback) {
      if (!is_array($callback) && $callback == 'maxlength_pre_render') {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Implements hook_sharethis_attributes_alter().
 *
 * This function requires patch #2900290 that allows the span attributes of
 * the ShareThis module to be altered.
 */
function wateraid_base_core_sharethis_attributes_alter(&$attributes): void {
  $config = \Drupal::config('system.site');
  // Set the share this url to full request uri.
  $attributes['st_url'] = \Drupal::request()->getUri();
  // Using the same style as used in the title.
  $attributes['st_title'] = $attributes['st_title'] . ' | ' . $config->get('name');

  // We want to set special values for donation forms.
  foreach (\Drupal::routeMatch()->getParameters() as $entity) {
    // Ensure the param is an entity and in fact a webform.
    if ($entity instanceof WebformInterface) {
      if (_wateraid_donation_forms_is_donation_form($entity)) {
        $attributes['st_url'] = $entity->toUrl('canonical', ['absolute' => TRUE])->toString();
        $attributes['st_title'] = $entity->label();

        // Do not continue once we find our donation form.
        break;
      }
    }
  }
}

/**
 * Implements hook_datalayer_alter().
 */
function wateraid_base_core_datalayer_alter(&$datalayer): void {
  // Overriding the userUid and entityName keys to ensure the user's ID and
  // name are not displayed in the HTML source code.
  $datalayer['userUid'] = '';
  $datalayer['entityName'] = '';
}

/**
 * Implements hook_metatags_alter().
 *
 * Alter metatags to allow for use of pseudo-tokens "[meta:title]" and
 * "[meta:description]" which will be replaced with the contents of the title
 * and description metatags respectively. This replacement will apply whether
 * the source tags are using default values or entity specific overrides.
 */
function wateraid_base_core_metatags_alter(array &$metatags, array &$context): void {
  foreach ($metatags as $metatag_id => $metatag_value) {
    $processed_value = strtolower(trim($metatag_value));
    if ($processed_value === '[meta:title]') {
      $metatags[$metatag_id] = $metatags['title'] ?? '';
    }

    if ($processed_value === '[meta:description]') {
      $metatags[$metatag_id] = $metatags['description'] ?? '';
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function wateraid_base_core_field_widget_form_alter(&$element, FormStateInterface $form_state, $context): void {
  // Update Metatag widget descriptions on title and description fields for
  // Open Graph and Twitter Card metatags to include pseudo-tag information.
  if (!empty($context['widget']) && $context['widget'] instanceof MetatagFirehose) {
    if (!empty($element['open_graph'])) {
      $title = $element['open_graph']['og_title']['#description'] ? $element['open_graph']['og_title']['#description'] . ' ' : '';
      $element['open_graph']['og_title']['#description'] = new TranslatableMarkup('@titleUse <em>[meta:title]</em> to ensure this metatag is always the same as the Title metatag.', [
        '@title' => $title,
      ]);
      $description = $element['open_graph']['og_description']['#description'] ? $element['open_graph']['og_description']['#description'] . ' ' : '';
      $element['open_graph']['og_description']['#description'] = new TranslatableMarkup('@descriptionUse <em>[meta:description]</em> to ensure this metatag is always the same as the Description metatag.', [
        '@description' => $description,
      ]);
    }

    if (!empty($element['twitter_cards'])) {
      $title = $element['twitter_cards']['twitter_cards_title']['#description'] ? $element['twitter_cards']['twitter_cards_title']['#description'] . ' ' : '';
      $element['twitter_cards']['twitter_cards_title']['#description'] = new TranslatableMarkup('@titleUse <em>[meta:title]</em> to ensure this metatag is always the same as the Title metatag.', [
        '@title' => $title,
      ]);
      $description = $element['twitter_cards']['twitter_cards_description']['#description'] ? $element['twitter_cards']['twitter_cards_description']['#description'] . ' ' : '';
      $element['twitter_cards']['twitter_cards_description']['#description'] = new TranslatableMarkup('@descriptionUse <em>[meta:description]</em> to ensure this metatag is always the same as the Description metatag.', [
        '@description' => $description,
      ]);
    }
  }

  if (!empty($context['widget']) && $context['widget'] instanceof OptionsButtonsWidget) {
    if ($context['items']->getName() === 'field_related_content_type') {
      // An array of content types to remove from the entity reference field.
      $options_to_remove = [
        'donation_form',
        'get_involved_all_and_everyone',
        'press_and_media_flexible',
        'waetdatapoint',
        'webform',
      ];

      foreach ($element['#options'] as $key => $option) {
        if (in_array($key, $options_to_remove, TRUE)) {
          unset($element['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_entity().
 *
 * Preprocess video_embed media entities to set iframe title to the media name.
 */
function wateraid_base_core_preprocess_media__video_embed__embedded(&$variables): void {
  $media = $variables['media'];

  if (empty($media) || empty($variables['content']['field_media_video_embed_field'])) {
    return;
  }

  foreach (Element::children($variables['content']['field_media_video_embed_field']) as $child_index) {
    $variables['content']['field_media_video_embed_field'][$child_index]['children']['#attributes']['title'] = $media->getName();
  }
}

/**
 * Implements hook_plugin_filter_condition_alter().
 */
function wateraid_base_core_plugin_filter_condition_alter(array &$definitions, array $extra, $consumer): void {
  // For Google Tag, we don't want to use the custom condition plugins as they
  // evaluate to FALSE with default values and prevent tag containers from being
  // rendered.
  if ($consumer == 'google_tag') {
    $definitions = array_diff_key($definitions, array_flip([
      'campaign_node',
      'donation_page',
      'donation_menu_header',
      'donation_menu_footer',
      'engagement_tool_node',
    ]));
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function wateraid_base_core_form_node_form_alter(&$form, FormStateInterface $form_state): void {
  // Make node form uncacheable as a workaround for WMS-1154 where certain users
  // are inconsistently receiving 'form has become outdated' errors when they
  // shouldn't be.
  $form['#cache']['max-age'] = 0;
  \Drupal::service('page_cache_kill_switch')->trigger();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for webform_results_clear.
 */
function wateraid_base_core_form_webform_results_clear_alter(&$form, FormStateInterface $form_state, $form_id): void {
  // Make webform results clear uncacheable as a workaround for WMS-1154 where
  // certain users  are inconsistently receiving 'form has become outdated'
  // errors when they shouldn't be.
  $form['#cache']['max-age'] = 0;
  \Drupal::service('page_cache_kill_switch')->trigger();
}

/**
 * Implements hook_views_query_alter().
 */
function wateraid_base_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query): void {
  // Enable content from different content types to be surfaced within the
  // related content articles view.
  if ($view->id() === 'related_content') {
    // Load the current node.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface && $node->hasField('field_related_content_type')) {
      // Identify node types to include in article related content view, based
      // content types selected in field_related_content_type.
      $enabled_content_types = $node->get('field_related_content_type')->getValue();
      $filter_list = array_column($enabled_content_types, 'target_id');

      // If node types are specified, override the default filters.
      if ($filter_list) {
        // Traverse through the 'where' part of the query.
        foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            // If this is the part of the query filtering on content type,
            // change it to match the settings defined on the current node.
            if ($condition['field'] === 'node_field_data.type') {
              $condition = [
                'field' => 'node_field_data.type',
                'value' => $filter_list,
                'operator' => 'in',
              ];
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function wateraid_base_core_entity_presave(EntityInterface $entity): void {
  // Ongoing issue see: WMS-2038 - where new articles and publications are not
  // being shown on the homepage or blog unless cache is cleared.
  if ($entity->isNew() && in_array($entity->bundle(), ['article', 'publication'])) {
    if (DrupalKernel::findSitePath(\Drupal::request()) === 'sites/washmatters') {
      // Clear the View cache for 'filtered content' and 'wash matters homepage
      // elements' when a new article or publication is edited or added.
      $views = ['filtered_content', 'wash_matters_homepage_elements'];
      foreach ($views as $name) {
        $view = Views::getView($name);

        $view?->storage->invalidateCaches();
      }

      // Also invalidate the node type cache tags.
      $tags = ['node_type:' . $entity->getType()];
      Cache::invalidateTags($tags);
    }
  }
}

/**
 * Implements  hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function wateraid_base_core_field_widget_single_element_form_alter(&$element, FormStateInterface &$form_state, $context): void {
  $widget = $context['widget'];
  $widget_type = $widget->getPluginId();

  // Alter the default summary description.
  if ($widget_type == 'text_textarea_with_summary' && isset($element['summary']['#description'])) {
    if (!$element['summary']['#required']) {
      $element['summary']['#description'] = t('Summary text is displayed in teasers, for example if this page is displayed on a filtered landing page, and by default is used for meta descriptions on search engines and social platforms. Leave blank to use trimmed value of full text as the summary.');
    }
  }
}

/**
 * Implements hook_captcha_alter().
 */
function wateraid_base_core_captcha_alter(&$captcha, $info): void {
  if ($lang = \Drupal::service('wateraid_base_core')->getSubsiteLanguage()) {
    if ($lang != 'en') {
      foreach ($captcha['form']['recaptcha_widget']['#attached']['library'] as &$library) {
        if ($library == 'recaptcha/google.recaptcha_en') {
          $library = 'recaptcha/google.recaptcha_' . $lang;
        }
      }
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function wateraid_base_core_library_info_alter(&$libraries, $extension): void {

  // Alter the recaptrcha libraries to force use of our lanmguage variants.
  if ($extension == 'recaptcha') {
    $recaptcha_src = 'https://www.google.com/recaptcha/api.js';
    if (\Drupal::config('recaptcha.settings')->get('use_globally')) {
      $recaptcha_src = 'https://www.recaptcha.net/recaptcha/api.js';
    }

    foreach ([
      'ja',
      'hi',
      'sv',
      'bn',
      'pt',
      'ur',
    ] as $lang) {
      if (!isset($libraries["google.recaptcha_$lang"])) {
        $url = Url::fromUri($recaptcha_src, [
          'query' => [
            'hl' => $lang,
            'render' => 'explicit',
            'onload' => 'drupalRecaptchaOnload',
          ],
          'absolute' => TRUE,
        ])->toString();
        $libraries["google.recaptcha_$lang"] = [
          'version' => '1.x',
          'header' => TRUE,
          'js' => [
            $url => [
              'type' => 'external',
              'minified' => TRUE,
              'attributes' => [
                'async' => TRUE,
                'defer' => TRUE,
              ],
            ],
          ],
        ];
      }
    }
  }
}
